// automatically generated by rust-bindgen

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed2 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed7 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed10 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed14 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: Union_Unnamed15,
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed15 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 28usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed16 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed22 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed23 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed16 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed17 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed18 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed19 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed20 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: Struct_Unnamed21,
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed21 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed22 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed23 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type siginfo_t = Struct_Unnamed14;
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum Enum_Unnamed24 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed25 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed26 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed27 {
    SEGV_MAPERR = 1,
    SEGV_ACCERR = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed28 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed29 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed30 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: Union_Unnamed31,
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed31 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed31 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed31 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed32 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sigevent_t = Struct_sigevent;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed33 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t = ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed34,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed34 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed34 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2: *mut siginfo_t,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed34 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8usize],
    pub _xmm: [Struct__xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::clone::Clone for Struct__ymmh_state {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::clone::Clone for Struct__xstate {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed35 {
    SS_ONSTACK = 1,
    SS_DISABLE = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8usize],
    pub _xmm: [Struct__libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed36 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mcontext_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ucontext_t = Struct_ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum___itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __itimer_which_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed37 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed38,
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed38 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed38 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed38 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __mbstate_t = Struct_Unnamed37;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed39 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos_t = Struct_Unnamed39;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed40 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _G_fpos64_t = Struct_Unnamed40;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn = unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                             __buf: *mut ::std::os::raw::c_char,
                                             __nbytes: size_t)
                                             -> __ssize_t;
pub type __io_write_fn = unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                              __buf: *const ::std::os::raw::c_char,
                                              __n: size_t)
                                              -> __ssize_t;
pub type __io_seek_fn = unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                                             __pos: *mut __off64_t,
                                             __w: ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int;
pub type __io_close_fn = unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
                                              -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type wchar_t = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed41 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2,
}
pub type idtype_t = Enum_Unnamed41;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed42 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed43 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed42 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed42 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed43 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed44 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed44 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed44 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __WAIT_STATUS = Union_Unnamed44;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed45 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type div_t = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed46 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ldiv_t = Struct_Unnamed46;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed47 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type lldiv_t = Struct_Unnamed47;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void,
                                                 arg2: *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
impl ::std::default::Default for Struct___jmp_buf_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type jmp_buf = [Struct___jmp_buf_tag; 1usize];
pub type sigjmp_buf = [Struct___jmp_buf_tag; 1usize];
pub type ptrdiff_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed48 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type max_align_t = Struct_Unnamed48;
pub type float_t = ::std::os::raw::c_float;
pub type double_t = ::std::os::raw::c_double;
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum Enum_Unnamed49 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum Enum_Unnamed50 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub type _LIB_VERSION_TYPE = Enum_Unnamed50;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_exception {
    pub _type: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: ::std::os::raw::c_double,
    pub arg2: ::std::os::raw::c_double,
    pub retval: ::std::os::raw::c_double,
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed51 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type imaxdiv_t = Struct_Unnamed51;
pub type duk_uint8_t = uint8_t;
pub type duk_int8_t = int8_t;
pub type duk_uint16_t = uint16_t;
pub type duk_int16_t = int16_t;
pub type duk_uint32_t = uint32_t;
pub type duk_int32_t = int32_t;
pub type duk_uint64_t = uint64_t;
pub type duk_int64_t = int64_t;
pub type duk_uint_least8_t = uint_least8_t;
pub type duk_int_least8_t = int_least8_t;
pub type duk_uint_least16_t = uint_least16_t;
pub type duk_int_least16_t = int_least16_t;
pub type duk_uint_least32_t = uint_least32_t;
pub type duk_int_least32_t = int_least32_t;
pub type duk_uint_least64_t = uint_least64_t;
pub type duk_int_least64_t = int_least64_t;
pub type duk_uint_fast8_t = uint_fast8_t;
pub type duk_int_fast8_t = int_fast8_t;
pub type duk_uint_fast16_t = uint_fast16_t;
pub type duk_int_fast16_t = int_fast16_t;
pub type duk_uint_fast32_t = uint_fast32_t;
pub type duk_int_fast32_t = int_fast32_t;
pub type duk_uint_fast64_t = uint_fast64_t;
pub type duk_int_fast64_t = int_fast64_t;
pub type duk_uintptr_t = uintptr_t;
pub type duk_intptr_t = intptr_t;
pub type duk_uintmax_t = uintmax_t;
pub type duk_intmax_t = intmax_t;
pub type duk_size_t = size_t;
pub type duk_ptrdiff_t = ptrdiff_t;
pub type duk_int_t = ::std::os::raw::c_int;
pub type duk_uint_t = ::std::os::raw::c_uint;
pub type duk_int_fast_t = duk_int_fast32_t;
pub type duk_uint_fast_t = duk_uint_fast32_t;
pub type duk_small_int_t = ::std::os::raw::c_int;
pub type duk_small_uint_t = ::std::os::raw::c_uint;
pub type duk_small_int_fast_t = duk_int_fast16_t;
pub type duk_small_uint_fast_t = duk_uint_fast16_t;
pub type duk_bool_t = duk_small_int_t;
pub type duk_idx_t = duk_int_t;
pub type duk_uidx_t = duk_uint_t;
pub type duk_uarridx_t = duk_uint_t;
pub type duk_ret_t = duk_small_int_t;
pub type duk_errcode_t = duk_int_t;
pub type duk_codepoint_t = duk_int_t;
pub type duk_ucodepoint_t = duk_uint_t;
pub type duk_float_t = ::std::os::raw::c_float;
pub type duk_double_t = ::std::os::raw::c_double;
pub enum Struct_duk_hthread { }
pub type duk_context = Struct_duk_hthread;
pub type duk_file = FILE;
pub type duk_memory_functions = Struct_duk_memory_functions;
pub type duk_function_list_entry = Struct_duk_function_list_entry;
pub type duk_number_list_entry = Struct_duk_number_list_entry;
pub type duk_c_function = ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context)
                                                                       -> duk_ret_t>;
pub type duk_alloc_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 size: duk_size_t)
                                                 -> *mut ::std::os::raw::c_void>;
pub type duk_realloc_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 ptr: *mut ::std::os::raw::c_void,
                                                 size: duk_size_t)
                                                 -> *mut ::std::os::raw::c_void>;
pub type duk_free_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 ptr: *mut ::std::os::raw::c_void)>;
pub type duk_fatal_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context,
                                                 code: duk_errcode_t,
                                                 msg: *const ::std::os::raw::c_char)>;
pub type duk_decode_char_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 codepoint: duk_codepoint_t)>;
pub type duk_map_char_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 codepoint: duk_codepoint_t)
                                                 -> duk_codepoint_t>;
pub type duk_safe_call_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context) -> duk_ret_t>;
pub type duk_debug_read_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 buffer: *mut ::std::os::raw::c_char,
                                                 length: duk_size_t)
                                                 -> duk_size_t>;
pub type duk_debug_write_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void,
                                                 buffer: *const ::std::os::raw::c_char,
                                                 length: duk_size_t)
                                                 -> duk_size_t>;
pub type duk_debug_peek_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void) -> duk_size_t>;
pub type duk_debug_read_flush_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void)>;
pub type duk_debug_write_flush_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void)>;
pub type duk_debug_request_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context,
                                                 udata: *mut ::std::os::raw::c_void,
                                                 nvalues: duk_idx_t)
                                                 -> duk_idx_t>;
pub type duk_debug_detached_function =
    ::std::option::Option<unsafe extern "C" fn(udata: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_duk_memory_functions {
    pub alloc_func: duk_alloc_function,
    pub realloc_func: duk_realloc_function,
    pub free_func: duk_free_function,
    pub udata: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct_duk_memory_functions {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_duk_function_list_entry {
    pub key: *const ::std::os::raw::c_char,
    pub value: duk_c_function,
    pub nargs: duk_idx_t,
}
impl ::std::default::Default for Struct_duk_function_list_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_duk_number_list_entry {
    pub key: *const ::std::os::raw::c_char,
    pub value: duk_double_t,
}
impl ::std::default::Default for Struct_duk_number_list_entry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_duk_double_union {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_duk_double_union {
    pub unsafe fn d(&mut self) -> *mut ::std::os::raw::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut [::std::os::raw::c_float; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ull(&mut self) -> *mut [duk_uint64_t; 1usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut [duk_uint32_t; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut [duk_uint16_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut [duk_uint8_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_duk_double_union {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type duk_double_union = Union_duk_double_union;
pub type __builtin_va_list = [Struct___va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut __daylight: ::std::os::raw::c_int;
    pub static mut __timezone: ::std::os::raw::c_long;
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int,
                  __readfds: *mut fd_set,
                  __writefds: *mut fd_set,
                  __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval)
                  -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int,
                   __readfds: *mut fd_set,
                   __writefds: *mut fd_set,
                   __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t)
                   -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
                           -> ::std::os::raw::c_ulonglong;
    pub fn __sigismember(arg1: *const __sigset_t,
                         arg2: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t,
                       arg2: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t,
                       arg2: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t)
                         -> __sighandler_t;
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn siggetmask() -> ::std::os::raw::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaddset(__set: *mut sigset_t,
                     __signo: ::std::os::raw::c_int)
                     -> ::std::os::raw::c_int;
    pub fn sigdelset(__set: *mut sigset_t,
                     __signo: ::std::os::raw::c_int)
                     -> ::std::os::raw::c_int;
    pub fn sigismember(__set: *const sigset_t,
                       __signo: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn sigprocmask(__how: ::std::os::raw::c_int,
                       __set: *const sigset_t,
                       __oset: *mut sigset_t)
                       -> ::std::os::raw::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaction(__sig: ::std::os::raw::c_int,
                     __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction)
                     -> ::std::os::raw::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigwait(__set: *const sigset_t,
                   __sig: *mut ::std::os::raw::c_int)
                   -> ::std::os::raw::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
    pub fn sigtimedwait(__set: *const sigset_t,
                        __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec)
                        -> ::std::os::raw::c_int;
    pub fn sigqueue(__pid: __pid_t,
                    __sig: ::std::os::raw::c_int,
                    __val: Union_sigval)
                    -> ::std::os::raw::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::std::os::raw::c_int;
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack,
                    __oss: *mut Struct_sigstack)
                    -> ::std::os::raw::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack)
                       -> ::std::os::raw::c_int;
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
                           -> ::std::os::raw::c_int;
    pub fn pthread_kill(__threadid: pthread_t,
                        __signo: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval,
                        __tz: __timezone_ptr_t)
                        -> ::std::os::raw::c_int;
    pub fn settimeofday(__tv: *const Struct_timeval,
                        __tz: *const Struct_timezone)
                        -> ::std::os::raw::c_int;
    pub fn adjtime(__delta: *const Struct_timeval,
                   __olddelta: *mut Struct_timeval)
                   -> ::std::os::raw::c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval)
                     -> ::std::os::raw::c_int;
    pub fn setitimer(__which: __itimer_which_t,
                     __new: *const Struct_itimerval,
                     __old: *mut Struct_itimerval)
                     -> ::std::os::raw::c_int;
    pub fn utimes(__file: *const ::std::os::raw::c_char,
                  __tvp: *mut Struct_timeval)
                  -> ::std::os::raw::c_int;
    pub fn lutimes(__file: *const ::std::os::raw::c_char,
                   __tvp: *mut Struct_timeval)
                   -> ::std::os::raw::c_int;
    pub fn futimes(__fd: ::std::os::raw::c_int,
                   __tvp: *mut Struct_timeval)
                   -> ::std::os::raw::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::std::os::raw::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::std::os::raw::c_char,
                    __maxsize: size_t,
                    __format: *const ::std::os::raw::c_char,
                    __tp: *const Struct_tm)
                    -> size_t;
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char,
                      __maxsize: size_t,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const Struct_tm,
                      __loc: __locale_t)
                      -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn asctime_r(__tp: *const Struct_tm,
                     __buf: *mut ::std::os::raw::c_char)
                     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(__timer: *const time_t,
                   __buf: *mut ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec)
                     -> ::std::os::raw::c_int;
    pub fn clock_getres(__clock_id: clockid_t,
                        __res: *mut Struct_timespec)
                        -> ::std::os::raw::c_int;
    pub fn clock_gettime(__clock_id: clockid_t,
                         __tp: *mut Struct_timespec)
                         -> ::std::os::raw::c_int;
    pub fn clock_settime(__clock_id: clockid_t,
                         __tp: *const Struct_timespec)
                         -> ::std::os::raw::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec)
                           -> ::std::os::raw::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
    pub fn timer_create(__clock_id: clockid_t,
                        __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t)
                        -> ::std::os::raw::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timer_settime(__timerid: timer_t,
                         __flags: ::std::os::raw::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec)
                         -> ::std::os::raw::c_int;
    pub fn timer_gettime(__timerid: timer_t,
                         __value: *mut Struct_itimerspec)
                         -> ::std::os::raw::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timespec_get(__ts: *mut Struct_timespec,
                        __base: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list,
                       arg4: *mut ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list)
                        -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE,
                    arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t)
                    -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE,
                     arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t)
                     -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE,
                       arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int)
                       -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE,
                       arg2: __off64_t,
                       arg3: ::std::os::raw::c_int)
                       -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char)
                 -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE)
                   -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char)
                  -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void,
                    __len: size_t,
                    __modes: *const ::std::os::raw::c_char)
                    -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t)
                          -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE,
                   __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int,
                   __n: size_t)
                   -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char,
                    __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char,
                    ...)
                    -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char,
                     __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list)
                     -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list)
                    -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char,
                   ...)
                   -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char,
                  ...)
                  -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char,
                  ...)
                  -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list)
                  -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list)
                   -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int,
                          __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char,
                 __n: ::std::os::raw::c_int,
                 __stream: *mut FILE)
                 -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t,
                      __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE)
                      -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t,
                    __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE)
                    -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t,
                   __stream: *mut FILE)
                   -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void,
                 __size: size_t,
                 __n: size_t,
                 __stream: *mut FILE)
                 -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void,
                  __size: size_t,
                  __n: size_t,
                  __s: *mut FILE)
                  -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void,
                          __size: size_t,
                          __n: size_t,
                          __stream: *mut FILE)
                          -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t,
                           __n: size_t,
                           __stream: *mut FILE)
                           -> size_t;
    pub fn fseek(__stream: *mut FILE,
                 __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int)
                 -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE,
                  __off: __off_t,
                  __whence: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char)
                 -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
                  -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
                  -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
                   -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t)
                     -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut Struct_random_data,
                    __result: *mut int32_t)
                    -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint,
                     __buf: *mut Struct_random_data)
                     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t,
                       __buf: *mut Struct_random_data)
                       -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut Struct_random_data)
                      -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
                     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
                     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut Struct_drand48_data)
                     -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut Struct_drand48_data)
                    -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data)
                     -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void,
                   __size: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t,
                          __size: size_t)
                          -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>) -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>) -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void,
                   __nmemb: size_t,
                   __size: size_t,
                   __compar: __compar_fn_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void,
                 __nmemb: size_t,
                 __size: size_t,
                 __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong)
                 -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
                -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
                -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
                -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
                 -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
                 -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
                 -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char,
                  __len: size_t)
                  -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char,
                  __len: size_t)
                  -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char,
                   __len: size_t)
                   -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char,
                   __len: size_t)
                   -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t,
                  __s: *const ::std::os::raw::c_char,
                  __n: size_t)
                  -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t,
                    __s: *const ::std::os::raw::c_char,
                    __n: size_t)
                    -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char,
                    __pwcs: *const wchar_t,
                    __n: size_t)
                    -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
                     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void,
                  __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int,
                  __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void,
                  __n: size_t)
                  -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int,
                  __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char,
                     __l: __locale_t)
                     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char,
                     __n: size_t,
                     __l: __locale_t)
                     -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int)
                  -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int)
                   -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
                      -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char,
                      __buflen: size_t)
                      -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int,
                      __l: __locale_t)
                      -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void,
                 __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void,
                __n: size_t)
                -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int)
                 -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int)
                  -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char,
                       __n: size_t)
                       -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char,
                     __n: size_t)
                     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char,
                   __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn setjmp(__env: jmp_buf) -> ::std::os::raw::c_int;
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn _setjmp(__env: *mut Struct___jmp_buf_tag) -> ::std::os::raw::c_int;
    pub fn longjmp(__env: *mut Struct___jmp_buf_tag, __val: ::std::os::raw::c_int);
    pub fn _longjmp(__env: *mut Struct___jmp_buf_tag, __val: ::std::os::raw::c_int);
    pub fn siglongjmp(__env: sigjmp_buf, __val: ::std::os::raw::c_int);
    pub fn acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2(__y: ::std::os::raw::c_double,
                 __x: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __atan2(__y: ::std::os::raw::c_double,
                   __x: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexp(__x: ::std::os::raw::c_double,
                 __exponent: *mut ::std::os::raw::c_int)
                 -> ::std::os::raw::c_double;
    pub fn __frexp(__x: ::std::os::raw::c_double,
                   __exponent: *mut ::std::os::raw::c_int)
                   -> ::std::os::raw::c_double;
    pub fn ldexp(__x: ::std::os::raw::c_double,
                 __exponent: ::std::os::raw::c_int)
                 -> ::std::os::raw::c_double;
    pub fn __ldexp(__x: ::std::os::raw::c_double,
                   __exponent: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_double;
    pub fn log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modf(__x: ::std::os::raw::c_double,
                __iptr: *mut ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __modf(__x: ::std::os::raw::c_double,
                  __iptr: *mut ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn pow(__x: ::std::os::raw::c_double,
               __y: ::std::os::raw::c_double)
               -> ::std::os::raw::c_double;
    pub fn __pow(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypot(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __hypot(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmod(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __fmod(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn __isinf(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __finite(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isinf(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finite(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn drem(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __drem(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn significand(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __significand(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn copysign(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double)
                    -> ::std::os::raw::c_double;
    pub fn __copysign(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
                      -> ::std::os::raw::c_double;
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __isnan(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isnan(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jn(arg1: ::std::os::raw::c_int,
              arg2: ::std::os::raw::c_double)
              -> ::std::os::raw::c_double;
    pub fn __jn(arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn yn(arg1: ::std::os::raw::c_int,
              arg2: ::std::os::raw::c_double)
              -> ::std::os::raw::c_double;
    pub fn __yn(arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgamma_r(arg1: ::std::os::raw::c_double,
                    __signgamp: *mut ::std::os::raw::c_int)
                    -> ::std::os::raw::c_double;
    pub fn __lgamma_r(arg1: ::std::os::raw::c_double,
                      __signgamp: *mut ::std::os::raw::c_int)
                      -> ::std::os::raw::c_double;
    pub fn rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafter(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
                     -> ::std::os::raw::c_double;
    pub fn __nextafter(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
                       -> ::std::os::raw::c_double;
    pub fn nexttoward(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
                      -> ::std::os::raw::c_double;
    pub fn __nexttoward(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
                        -> ::std::os::raw::c_double;
    pub fn remainder(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
                     -> ::std::os::raw::c_double;
    pub fn __remainder(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
                       -> ::std::os::raw::c_double;
    pub fn scalbn(__x: ::std::os::raw::c_double,
                  __n: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_double;
    pub fn __scalbn(__x: ::std::os::raw::c_double,
                    __n: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_double;
    pub fn ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalbln(__x: ::std::os::raw::c_double,
                   __n: ::std::os::raw::c_long)
                   -> ::std::os::raw::c_double;
    pub fn __scalbln(__x: ::std::os::raw::c_double,
                     __n: ::std::os::raw::c_long)
                     -> ::std::os::raw::c_double;
    pub fn nearbyint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __nearbyint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remquo(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double,
                  __quo: *mut ::std::os::raw::c_int)
                  -> ::std::os::raw::c_double;
    pub fn __remquo(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double,
                    __quo: *mut ::std::os::raw::c_int)
                    -> ::std::os::raw::c_double;
    pub fn lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn fdim(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __fdim(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn fmax(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __fmax(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn fmin(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __fmin(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn __fpclassify(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __signbit(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn fma(__x: ::std::os::raw::c_double,
               __y: ::std::os::raw::c_double,
               __z: ::std::os::raw::c_double)
               -> ::std::os::raw::c_double;
    pub fn __fma(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double,
                 __z: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn scalb(__x: ::std::os::raw::c_double,
                 __n: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __scalb(__x: ::std::os::raw::c_double,
                   __n: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atan2f(__y: ::std::os::raw::c_float,
                  __x: ::std::os::raw::c_float)
                  -> ::std::os::raw::c_float;
    pub fn __atan2f(__y: ::std::os::raw::c_float,
                    __x: ::std::os::raw::c_float)
                    -> ::std::os::raw::c_float;
    pub fn cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn frexpf(__x: ::std::os::raw::c_float,
                  __exponent: *mut ::std::os::raw::c_int)
                  -> ::std::os::raw::c_float;
    pub fn __frexpf(__x: ::std::os::raw::c_float,
                    __exponent: *mut ::std::os::raw::c_int)
                    -> ::std::os::raw::c_float;
    pub fn ldexpf(__x: ::std::os::raw::c_float,
                  __exponent: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_float;
    pub fn __ldexpf(__x: ::std::os::raw::c_float,
                    __exponent: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_float;
    pub fn logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn modff(__x: ::std::os::raw::c_float,
                 __iptr: *mut ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __modff(__x: ::std::os::raw::c_float,
                   __iptr: *mut ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn powf(__x: ::std::os::raw::c_float,
                __y: ::std::os::raw::c_float)
                -> ::std::os::raw::c_float;
    pub fn __powf(__x: ::std::os::raw::c_float,
                  __y: ::std::os::raw::c_float)
                  -> ::std::os::raw::c_float;
    pub fn sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn hypotf(__x: ::std::os::raw::c_float,
                  __y: ::std::os::raw::c_float)
                  -> ::std::os::raw::c_float;
    pub fn __hypotf(__x: ::std::os::raw::c_float,
                    __y: ::std::os::raw::c_float)
                    -> ::std::os::raw::c_float;
    pub fn cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fmodf(__x: ::std::os::raw::c_float,
                 __y: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __fmodf(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn __isinff(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __finitef(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn isinff(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn finitef(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn dremf(__x: ::std::os::raw::c_float,
                 __y: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __dremf(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn significandf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __significandf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn copysignf(__x: ::std::os::raw::c_float,
                     __y: ::std::os::raw::c_float)
                     -> ::std::os::raw::c_float;
    pub fn __copysignf(__x: ::std::os::raw::c_float,
                       __y: ::std::os::raw::c_float)
                       -> ::std::os::raw::c_float;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_float;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_float;
    pub fn __isnanf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn isnanf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn jnf(arg1: ::std::os::raw::c_int,
               arg2: ::std::os::raw::c_float)
               -> ::std::os::raw::c_float;
    pub fn __jnf(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ynf(arg1: ::std::os::raw::c_int,
               arg2: ::std::os::raw::c_float)
               -> ::std::os::raw::c_float;
    pub fn __ynf(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf_r(arg1: ::std::os::raw::c_float,
                     __signgamp: *mut ::std::os::raw::c_int)
                     -> ::std::os::raw::c_float;
    pub fn __lgammaf_r(arg1: ::std::os::raw::c_float,
                       __signgamp: *mut ::std::os::raw::c_int)
                       -> ::std::os::raw::c_float;
    pub fn rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn nextafterf(__x: ::std::os::raw::c_float,
                      __y: ::std::os::raw::c_float)
                      -> ::std::os::raw::c_float;
    pub fn __nextafterf(__x: ::std::os::raw::c_float,
                        __y: ::std::os::raw::c_float)
                        -> ::std::os::raw::c_float;
    pub fn nexttowardf(__x: ::std::os::raw::c_float,
                       __y: ::std::os::raw::c_double)
                       -> ::std::os::raw::c_float;
    pub fn __nexttowardf(__x: ::std::os::raw::c_float,
                         __y: ::std::os::raw::c_double)
                         -> ::std::os::raw::c_float;
    pub fn remainderf(__x: ::std::os::raw::c_float,
                      __y: ::std::os::raw::c_float)
                      -> ::std::os::raw::c_float;
    pub fn __remainderf(__x: ::std::os::raw::c_float,
                        __y: ::std::os::raw::c_float)
                        -> ::std::os::raw::c_float;
    pub fn scalbnf(__x: ::std::os::raw::c_float,
                   __n: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_float;
    pub fn __scalbnf(__x: ::std::os::raw::c_float,
                     __n: ::std::os::raw::c_int)
                     -> ::std::os::raw::c_float;
    pub fn ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn scalblnf(__x: ::std::os::raw::c_float,
                    __n: ::std::os::raw::c_long)
                    -> ::std::os::raw::c_float;
    pub fn __scalblnf(__x: ::std::os::raw::c_float,
                      __n: ::std::os::raw::c_long)
                      -> ::std::os::raw::c_float;
    pub fn nearbyintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __nearbyintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn remquof(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float,
                   __quo: *mut ::std::os::raw::c_int)
                   -> ::std::os::raw::c_float;
    pub fn __remquof(__x: ::std::os::raw::c_float,
                     __y: ::std::os::raw::c_float,
                     __quo: *mut ::std::os::raw::c_int)
                     -> ::std::os::raw::c_float;
    pub fn lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_longlong;
    pub fn fdimf(__x: ::std::os::raw::c_float,
                 __y: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __fdimf(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn fmaxf(__x: ::std::os::raw::c_float,
                 __y: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __fmaxf(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn fminf(__x: ::std::os::raw::c_float,
                 __y: ::std::os::raw::c_float)
                 -> ::std::os::raw::c_float;
    pub fn __fminf(__x: ::std::os::raw::c_float,
                   __y: ::std::os::raw::c_float)
                   -> ::std::os::raw::c_float;
    pub fn __fpclassifyf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn fmaf(__x: ::std::os::raw::c_float,
                __y: ::std::os::raw::c_float,
                __z: ::std::os::raw::c_float)
                -> ::std::os::raw::c_float;
    pub fn __fmaf(__x: ::std::os::raw::c_float,
                  __y: ::std::os::raw::c_float,
                  __z: ::std::os::raw::c_float)
                  -> ::std::os::raw::c_float;
    pub fn scalbf(__x: ::std::os::raw::c_float,
                  __n: ::std::os::raw::c_float)
                  -> ::std::os::raw::c_float;
    pub fn __scalbf(__x: ::std::os::raw::c_float,
                    __n: ::std::os::raw::c_float)
                    -> ::std::os::raw::c_float;
    pub fn acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2l(__y: ::std::os::raw::c_double,
                  __x: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn __atan2l(__y: ::std::os::raw::c_double,
                    __x: ::std::os::raw::c_double)
                    -> ::std::os::raw::c_double;
    pub fn cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acoshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acoshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexpl(__x: ::std::os::raw::c_double,
                  __exponent: *mut ::std::os::raw::c_int)
                  -> ::std::os::raw::c_double;
    pub fn __frexpl(__x: ::std::os::raw::c_double,
                    __exponent: *mut ::std::os::raw::c_int)
                    -> ::std::os::raw::c_double;
    pub fn ldexpl(__x: ::std::os::raw::c_double,
                  __exponent: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_double;
    pub fn __ldexpl(__x: ::std::os::raw::c_double,
                    __exponent: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_double;
    pub fn logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modfl(__x: ::std::os::raw::c_double,
                 __iptr: *mut ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __modfl(__x: ::std::os::raw::c_double,
                   __iptr: *mut ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn expm1l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1pl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1pl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn powl(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __powl(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypotl(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn __hypotl(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double)
                    -> ::std::os::raw::c_double;
    pub fn cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floorl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floorl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmodl(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __fmodl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn __isinfl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __finitel(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isinfl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finitel(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn dreml(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __dreml(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn significandl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __significandl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn copysignl(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
                     -> ::std::os::raw::c_double;
    pub fn __copysignl(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
                       -> ::std::os::raw::c_double;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> ::std::os::raw::c_double;
    pub fn __isnanl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn isnanl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jnl(arg1: ::std::os::raw::c_int,
               arg2: ::std::os::raw::c_double)
               -> ::std::os::raw::c_double;
    pub fn __jnl(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ynl(arg1: ::std::os::raw::c_int,
               arg2: ::std::os::raw::c_double)
               -> ::std::os::raw::c_double;
    pub fn __ynl(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __lgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tgammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn gammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammal_r(arg1: ::std::os::raw::c_double,
                     __signgamp: *mut ::std::os::raw::c_int)
                     -> ::std::os::raw::c_double;
    pub fn __lgammal_r(arg1: ::std::os::raw::c_double,
                       __signgamp: *mut ::std::os::raw::c_int)
                       -> ::std::os::raw::c_double;
    pub fn rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafterl(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
                      -> ::std::os::raw::c_double;
    pub fn __nextafterl(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
                        -> ::std::os::raw::c_double;
    pub fn nexttowardl(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
                       -> ::std::os::raw::c_double;
    pub fn __nexttowardl(__x: ::std::os::raw::c_double,
                         __y: ::std::os::raw::c_double)
                         -> ::std::os::raw::c_double;
    pub fn remainderl(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
                      -> ::std::os::raw::c_double;
    pub fn __remainderl(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
                        -> ::std::os::raw::c_double;
    pub fn scalbnl(__x: ::std::os::raw::c_double,
                   __n: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_double;
    pub fn __scalbnl(__x: ::std::os::raw::c_double,
                     __n: ::std::os::raw::c_int)
                     -> ::std::os::raw::c_double;
    pub fn ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalblnl(__x: ::std::os::raw::c_double,
                    __n: ::std::os::raw::c_long)
                    -> ::std::os::raw::c_double;
    pub fn __scalblnl(__x: ::std::os::raw::c_double,
                      __n: ::std::os::raw::c_long)
                      -> ::std::os::raw::c_double;
    pub fn nearbyintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __nearbyintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn roundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __roundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn truncl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __truncl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remquol(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double,
                   __quo: *mut ::std::os::raw::c_int)
                   -> ::std::os::raw::c_double;
    pub fn __remquol(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double,
                     __quo: *mut ::std::os::raw::c_int)
                     -> ::std::os::raw::c_double;
    pub fn lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_longlong;
    pub fn fdiml(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __fdiml(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn fmaxl(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __fmaxl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn fminl(__x: ::std::os::raw::c_double,
                 __y: ::std::os::raw::c_double)
                 -> ::std::os::raw::c_double;
    pub fn __fminl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double)
                   -> ::std::os::raw::c_double;
    pub fn __fpclassifyl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn fmal(__x: ::std::os::raw::c_double,
                __y: ::std::os::raw::c_double,
                __z: ::std::os::raw::c_double)
                -> ::std::os::raw::c_double;
    pub fn __fmal(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double,
                  __z: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn scalbl(__x: ::std::os::raw::c_double,
                  __n: ::std::os::raw::c_double)
                  -> ::std::os::raw::c_double;
    pub fn __scalbl(__x: ::std::os::raw::c_double,
                    __n: ::std::os::raw::c_double)
                    -> ::std::os::raw::c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> ::std::os::raw::c_int;
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int)
                     -> intmax_t;
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int)
                     -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int)
                     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t,
                     __base: ::std::os::raw::c_int)
                     -> uintmax_t;
    pub fn duk_create_heap(alloc_func: duk_alloc_function,
                           realloc_func: duk_realloc_function,
                           free_func: duk_free_function,
                           heap_udata: *mut ::std::os::raw::c_void,
                           fatal_handler: duk_fatal_function)
                           -> *mut duk_context;
    pub fn duk_destroy_heap(ctx: *mut duk_context);
    pub fn duk_alloc_raw(ctx: *mut duk_context, size: duk_size_t) -> *mut ::std::os::raw::c_void;
    pub fn duk_free_raw(ctx: *mut duk_context, ptr: *mut ::std::os::raw::c_void);
    pub fn duk_realloc_raw(ctx: *mut duk_context,
                           ptr: *mut ::std::os::raw::c_void,
                           size: duk_size_t)
                           -> *mut ::std::os::raw::c_void;
    pub fn duk_alloc(ctx: *mut duk_context, size: duk_size_t) -> *mut ::std::os::raw::c_void;
    pub fn duk_free(ctx: *mut duk_context, ptr: *mut ::std::os::raw::c_void);
    pub fn duk_realloc(ctx: *mut duk_context,
                       ptr: *mut ::std::os::raw::c_void,
                       size: duk_size_t)
                       -> *mut ::std::os::raw::c_void;
    pub fn duk_get_memory_functions(ctx: *mut duk_context, out_funcs: *mut duk_memory_functions);
    pub fn duk_gc(ctx: *mut duk_context, flags: duk_uint_t);
    pub fn duk_throw(ctx: *mut duk_context);
    pub fn duk_fatal(ctx: *mut duk_context,
                     err_code: duk_errcode_t,
                     err_msg: *const ::std::os::raw::c_char);
    pub fn duk_error_raw(ctx: *mut duk_context,
                         err_code: duk_errcode_t,
                         filename: *const ::std::os::raw::c_char,
                         line: duk_int_t,
                         fmt: *const ::std::os::raw::c_char,
                         ...);
    pub fn duk_error_va_raw(ctx: *mut duk_context,
                            err_code: duk_errcode_t,
                            filename: *const ::std::os::raw::c_char,
                            line: duk_int_t,
                            fmt: *const ::std::os::raw::c_char,
                            ap: va_list);
    pub fn duk_is_strict_call(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_is_constructor_call(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_normalize_index(ctx: *mut duk_context, index: duk_idx_t) -> duk_idx_t;
    pub fn duk_require_normalize_index(ctx: *mut duk_context, index: duk_idx_t) -> duk_idx_t;
    pub fn duk_is_valid_index(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_require_valid_index(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_top(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_set_top(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_top_index(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_require_top_index(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_check_stack(ctx: *mut duk_context, extra: duk_idx_t) -> duk_bool_t;
    pub fn duk_require_stack(ctx: *mut duk_context, extra: duk_idx_t);
    pub fn duk_check_stack_top(ctx: *mut duk_context, top: duk_idx_t) -> duk_bool_t;
    pub fn duk_require_stack_top(ctx: *mut duk_context, top: duk_idx_t);
    pub fn duk_swap(ctx: *mut duk_context, index1: duk_idx_t, index2: duk_idx_t);
    pub fn duk_swap_top(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_dup(ctx: *mut duk_context, from_index: duk_idx_t);
    pub fn duk_dup_top(ctx: *mut duk_context);
    pub fn duk_insert(ctx: *mut duk_context, to_index: duk_idx_t);
    pub fn duk_replace(ctx: *mut duk_context, to_index: duk_idx_t);
    pub fn duk_copy(ctx: *mut duk_context, from_index: duk_idx_t, to_index: duk_idx_t);
    pub fn duk_remove(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_xcopymove_raw(to_ctx: *mut duk_context,
                             from_ctx: *mut duk_context,
                             count: duk_idx_t,
                             is_copy: duk_bool_t);
    pub fn duk_push_undefined(ctx: *mut duk_context);
    pub fn duk_push_null(ctx: *mut duk_context);
    pub fn duk_push_boolean(ctx: *mut duk_context, val: duk_bool_t);
    pub fn duk_push_true(ctx: *mut duk_context);
    pub fn duk_push_false(ctx: *mut duk_context);
    pub fn duk_push_number(ctx: *mut duk_context, val: duk_double_t);
    pub fn duk_push_nan(ctx: *mut duk_context);
    pub fn duk_push_int(ctx: *mut duk_context, val: duk_int_t);
    pub fn duk_push_uint(ctx: *mut duk_context, val: duk_uint_t);
    pub fn duk_push_string(ctx: *mut duk_context,
                           str: *const ::std::os::raw::c_char)
                           -> *const ::std::os::raw::c_char;
    pub fn duk_push_lstring(ctx: *mut duk_context,
                            str: *const ::std::os::raw::c_char,
                            len: duk_size_t)
                            -> *const ::std::os::raw::c_char;
    pub fn duk_push_pointer(ctx: *mut duk_context, p: *mut ::std::os::raw::c_void);
    pub fn duk_push_sprintf(ctx: *mut duk_context,
                            fmt: *const ::std::os::raw::c_char,
                            ...)
                            -> *const ::std::os::raw::c_char;
    pub fn duk_push_vsprintf(ctx: *mut duk_context,
                             fmt: *const ::std::os::raw::c_char,
                             ap: va_list)
                             -> *const ::std::os::raw::c_char;
    pub fn duk_push_string_file_raw(ctx: *mut duk_context,
                                    path: *const ::std::os::raw::c_char,
                                    flags: duk_uint_t)
                                    -> *const ::std::os::raw::c_char;
    pub fn duk_push_this(ctx: *mut duk_context);
    pub fn duk_push_current_function(ctx: *mut duk_context);
    pub fn duk_push_current_thread(ctx: *mut duk_context);
    pub fn duk_push_global_object(ctx: *mut duk_context);
    pub fn duk_push_heap_stash(ctx: *mut duk_context);
    pub fn duk_push_global_stash(ctx: *mut duk_context);
    pub fn duk_push_thread_stash(ctx: *mut duk_context, target_ctx: *mut duk_context);
    pub fn duk_push_object(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_array(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_c_function(ctx: *mut duk_context,
                               func: duk_c_function,
                               nargs: duk_idx_t)
                               -> duk_idx_t;
    pub fn duk_push_c_lightfunc(ctx: *mut duk_context,
                                func: duk_c_function,
                                nargs: duk_idx_t,
                                length: duk_idx_t,
                                magic: duk_int_t)
                                -> duk_idx_t;
    pub fn duk_push_thread_raw(ctx: *mut duk_context, flags: duk_uint_t) -> duk_idx_t;
    pub fn duk_push_error_object_raw(ctx: *mut duk_context,
                                     err_code: duk_errcode_t,
                                     filename: *const ::std::os::raw::c_char,
                                     line: duk_int_t,
                                     fmt: *const ::std::os::raw::c_char,
                                     ...)
                                     -> duk_idx_t;
    pub fn duk_push_error_object_va_raw(ctx: *mut duk_context,
                                        err_code: duk_errcode_t,
                                        filename: *const ::std::os::raw::c_char,
                                        line: duk_int_t,
                                        fmt: *const ::std::os::raw::c_char,
                                        ap: va_list)
                                        -> duk_idx_t;
    pub fn duk_push_buffer_raw(ctx: *mut duk_context,
                               size: duk_size_t,
                               flags: duk_small_uint_t)
                               -> *mut ::std::os::raw::c_void;
    pub fn duk_push_buffer_object(ctx: *mut duk_context,
                                  idx_buffer: duk_idx_t,
                                  byte_offset: duk_size_t,
                                  byte_length: duk_size_t,
                                  flags: duk_uint_t);
    pub fn duk_push_heapptr(ctx: *mut duk_context, ptr: *mut ::std::os::raw::c_void) -> duk_idx_t;
    pub fn duk_pop(ctx: *mut duk_context);
    pub fn duk_pop_n(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_pop_2(ctx: *mut duk_context);
    pub fn duk_pop_3(ctx: *mut duk_context);
    pub fn duk_get_type(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_check_type(ctx: *mut duk_context, index: duk_idx_t, _type: duk_int_t) -> duk_bool_t;
    pub fn duk_get_type_mask(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint_t;
    pub fn duk_check_type_mask(ctx: *mut duk_context,
                               index: duk_idx_t,
                               mask: duk_uint_t)
                               -> duk_bool_t;
    pub fn duk_is_undefined(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_null(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_null_or_undefined(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_boolean(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_number(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_nan(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_string(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_object(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_buffer(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_pointer(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_lightfunc(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_array(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_c_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_ecmascript_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_bound_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_thread(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_dynamic_buffer(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_fixed_buffer(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_external_buffer(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_get_error_code(ctx: *mut duk_context, index: duk_idx_t) -> duk_errcode_t;
    pub fn duk_get_boolean(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_get_number(ctx: *mut duk_context, index: duk_idx_t) -> duk_double_t;
    pub fn duk_get_int(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_get_uint(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint_t;
    pub fn duk_get_string(ctx: *mut duk_context,
                          index: duk_idx_t)
                          -> *const ::std::os::raw::c_char;
    pub fn duk_get_lstring(ctx: *mut duk_context,
                           index: duk_idx_t,
                           out_len: *mut duk_size_t)
                           -> *const ::std::os::raw::c_char;
    pub fn duk_get_buffer(ctx: *mut duk_context,
                          index: duk_idx_t,
                          out_size: *mut duk_size_t)
                          -> *mut ::std::os::raw::c_void;
    pub fn duk_get_buffer_data(ctx: *mut duk_context,
                               index: duk_idx_t,
                               out_size: *mut duk_size_t)
                               -> *mut ::std::os::raw::c_void;
    pub fn duk_get_pointer(ctx: *mut duk_context, index: duk_idx_t) -> *mut ::std::os::raw::c_void;
    pub fn duk_get_c_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_c_function;
    pub fn duk_get_context(ctx: *mut duk_context, index: duk_idx_t) -> *mut duk_context;
    pub fn duk_get_heapptr(ctx: *mut duk_context, index: duk_idx_t) -> *mut ::std::os::raw::c_void;
    pub fn duk_get_length(ctx: *mut duk_context, index: duk_idx_t) -> duk_size_t;
    pub fn duk_require_undefined(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_null(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_boolean(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_require_number(ctx: *mut duk_context, index: duk_idx_t) -> duk_double_t;
    pub fn duk_require_int(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_require_uint(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint_t;
    pub fn duk_require_string(ctx: *mut duk_context,
                              index: duk_idx_t)
                              -> *const ::std::os::raw::c_char;
    pub fn duk_require_lstring(ctx: *mut duk_context,
                               index: duk_idx_t,
                               out_len: *mut duk_size_t)
                               -> *const ::std::os::raw::c_char;
    pub fn duk_require_buffer(ctx: *mut duk_context,
                              index: duk_idx_t,
                              out_size: *mut duk_size_t)
                              -> *mut ::std::os::raw::c_void;
    pub fn duk_require_buffer_data(ctx: *mut duk_context,
                                   index: duk_idx_t,
                                   out_size: *mut duk_size_t)
                                   -> *mut ::std::os::raw::c_void;
    pub fn duk_require_pointer(ctx: *mut duk_context,
                               index: duk_idx_t)
                               -> *mut ::std::os::raw::c_void;
    pub fn duk_require_c_function(ctx: *mut duk_context, index: duk_idx_t) -> duk_c_function;
    pub fn duk_require_context(ctx: *mut duk_context, index: duk_idx_t) -> *mut duk_context;
    pub fn duk_require_function(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_heapptr(ctx: *mut duk_context,
                               index: duk_idx_t)
                               -> *mut ::std::os::raw::c_void;
    pub fn duk_to_undefined(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_null(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_boolean(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_to_number(ctx: *mut duk_context, index: duk_idx_t) -> duk_double_t;
    pub fn duk_to_int(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_to_uint(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint_t;
    pub fn duk_to_int32(ctx: *mut duk_context, index: duk_idx_t) -> duk_int32_t;
    pub fn duk_to_uint32(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint32_t;
    pub fn duk_to_uint16(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint16_t;
    pub fn duk_to_string(ctx: *mut duk_context, index: duk_idx_t) -> *const ::std::os::raw::c_char;
    pub fn duk_to_lstring(ctx: *mut duk_context,
                          index: duk_idx_t,
                          out_len: *mut duk_size_t)
                          -> *const ::std::os::raw::c_char;
    pub fn duk_to_buffer_raw(ctx: *mut duk_context,
                             index: duk_idx_t,
                             out_size: *mut duk_size_t,
                             flags: duk_uint_t)
                             -> *mut ::std::os::raw::c_void;
    pub fn duk_to_pointer(ctx: *mut duk_context, index: duk_idx_t) -> *mut ::std::os::raw::c_void;
    pub fn duk_to_object(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_defaultvalue(ctx: *mut duk_context, index: duk_idx_t, hint: duk_int_t);
    pub fn duk_to_primitive(ctx: *mut duk_context, index: duk_idx_t, hint: duk_int_t);
    pub fn duk_safe_to_lstring(ctx: *mut duk_context,
                               index: duk_idx_t,
                               out_len: *mut duk_size_t)
                               -> *const ::std::os::raw::c_char;
    pub fn duk_base64_encode(ctx: *mut duk_context,
                             index: duk_idx_t)
                             -> *const ::std::os::raw::c_char;
    pub fn duk_base64_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_hex_encode(ctx: *mut duk_context,
                          index: duk_idx_t)
                          -> *const ::std::os::raw::c_char;
    pub fn duk_hex_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_json_encode(ctx: *mut duk_context,
                           index: duk_idx_t)
                           -> *const ::std::os::raw::c_char;
    pub fn duk_json_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_resize_buffer(ctx: *mut duk_context,
                             index: duk_idx_t,
                             new_size: duk_size_t)
                             -> *mut ::std::os::raw::c_void;
    pub fn duk_steal_buffer(ctx: *mut duk_context,
                            index: duk_idx_t,
                            out_size: *mut duk_size_t)
                            -> *mut ::std::os::raw::c_void;
    pub fn duk_config_buffer(ctx: *mut duk_context,
                             index: duk_idx_t,
                             ptr: *mut ::std::os::raw::c_void,
                             len: duk_size_t);
    pub fn duk_get_prop(ctx: *mut duk_context, obj_index: duk_idx_t) -> duk_bool_t;
    pub fn duk_get_prop_string(ctx: *mut duk_context,
                               obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
                               -> duk_bool_t;
    pub fn duk_get_prop_index(ctx: *mut duk_context,
                              obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t)
                              -> duk_bool_t;
    pub fn duk_put_prop(ctx: *mut duk_context, obj_index: duk_idx_t) -> duk_bool_t;
    pub fn duk_put_prop_string(ctx: *mut duk_context,
                               obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
                               -> duk_bool_t;
    pub fn duk_put_prop_index(ctx: *mut duk_context,
                              obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t)
                              -> duk_bool_t;
    pub fn duk_del_prop(ctx: *mut duk_context, obj_index: duk_idx_t) -> duk_bool_t;
    pub fn duk_del_prop_string(ctx: *mut duk_context,
                               obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
                               -> duk_bool_t;
    pub fn duk_del_prop_index(ctx: *mut duk_context,
                              obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t)
                              -> duk_bool_t;
    pub fn duk_has_prop(ctx: *mut duk_context, obj_index: duk_idx_t) -> duk_bool_t;
    pub fn duk_has_prop_string(ctx: *mut duk_context,
                               obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
                               -> duk_bool_t;
    pub fn duk_has_prop_index(ctx: *mut duk_context,
                              obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t)
                              -> duk_bool_t;
    pub fn duk_def_prop(ctx: *mut duk_context, obj_index: duk_idx_t, flags: duk_uint_t);
    pub fn duk_get_global_string(ctx: *mut duk_context,
                                 key: *const ::std::os::raw::c_char)
                                 -> duk_bool_t;
    pub fn duk_put_global_string(ctx: *mut duk_context,
                                 key: *const ::std::os::raw::c_char)
                                 -> duk_bool_t;
    pub fn duk_get_prototype(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_prototype(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_finalizer(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_finalizer(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_global_object(ctx: *mut duk_context);
    pub fn duk_get_magic(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_set_magic(ctx: *mut duk_context, index: duk_idx_t, magic: duk_int_t);
    pub fn duk_get_current_magic(ctx: *mut duk_context) -> duk_int_t;
    pub fn duk_put_function_list(ctx: *mut duk_context,
                                 obj_index: duk_idx_t,
                                 funcs: *const duk_function_list_entry);
    pub fn duk_put_number_list(ctx: *mut duk_context,
                               obj_index: duk_idx_t,
                               numbers: *const duk_number_list_entry);
    pub fn duk_get_var(ctx: *mut duk_context);
    pub fn duk_put_var(ctx: *mut duk_context);
    pub fn duk_del_var(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_has_var(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_compact(ctx: *mut duk_context, obj_index: duk_idx_t);
    pub fn duk_enum(ctx: *mut duk_context, obj_index: duk_idx_t, enum_flags: duk_uint_t);
    pub fn duk_next(ctx: *mut duk_context,
                    enum_index: duk_idx_t,
                    get_value: duk_bool_t)
                    -> duk_bool_t;
    pub fn duk_concat(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_join(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_decode_string(ctx: *mut duk_context,
                             index: duk_idx_t,
                             callback: duk_decode_char_function,
                             udata: *mut ::std::os::raw::c_void);
    pub fn duk_map_string(ctx: *mut duk_context,
                          index: duk_idx_t,
                          callback: duk_map_char_function,
                          udata: *mut ::std::os::raw::c_void);
    pub fn duk_substring(ctx: *mut duk_context,
                         index: duk_idx_t,
                         start_char_offset: duk_size_t,
                         end_char_offset: duk_size_t);
    pub fn duk_trim(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_char_code_at(ctx: *mut duk_context,
                            index: duk_idx_t,
                            char_offset: duk_size_t)
                            -> duk_codepoint_t;
    pub fn duk_equals(ctx: *mut duk_context, index1: duk_idx_t, index2: duk_idx_t) -> duk_bool_t;
    pub fn duk_strict_equals(ctx: *mut duk_context,
                             index1: duk_idx_t,
                             index2: duk_idx_t)
                             -> duk_bool_t;
    pub fn duk_instanceof(ctx: *mut duk_context,
                          index1: duk_idx_t,
                          index2: duk_idx_t)
                          -> duk_bool_t;
    pub fn duk_call(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_call_method(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_call_prop(ctx: *mut duk_context, obj_index: duk_idx_t, nargs: duk_idx_t);
    pub fn duk_pcall(ctx: *mut duk_context, nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_pcall_method(ctx: *mut duk_context, nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_pcall_prop(ctx: *mut duk_context,
                          obj_index: duk_idx_t,
                          nargs: duk_idx_t)
                          -> duk_int_t;
    pub fn duk_new(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_pnew(ctx: *mut duk_context, nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_safe_call(ctx: *mut duk_context,
                         func: duk_safe_call_function,
                         nargs: duk_idx_t,
                         nrets: duk_idx_t)
                         -> duk_int_t;
    pub fn duk_eval_raw(ctx: *mut duk_context,
                        src_buffer: *const ::std::os::raw::c_char,
                        src_length: duk_size_t,
                        flags: duk_uint_t)
                        -> duk_int_t;
    pub fn duk_compile_raw(ctx: *mut duk_context,
                           src_buffer: *const ::std::os::raw::c_char,
                           src_length: duk_size_t,
                           flags: duk_uint_t)
                           -> duk_int_t;
    pub fn duk_dump_function(ctx: *mut duk_context);
    pub fn duk_load_function(ctx: *mut duk_context);
    pub fn duk_log(ctx: *mut duk_context,
                   level: duk_int_t,
                   fmt: *const ::std::os::raw::c_char,
                   ...);
    pub fn duk_log_va(ctx: *mut duk_context,
                      level: duk_int_t,
                      fmt: *const ::std::os::raw::c_char,
                      ap: va_list);
    pub fn duk_push_context_dump(ctx: *mut duk_context);
    pub fn duk_debugger_attach_custom(ctx: *mut duk_context,
                                      read_cb: duk_debug_read_function,
                                      write_cb: duk_debug_write_function,
                                      peek_cb: duk_debug_peek_function,
                                      read_flush_cb: duk_debug_read_flush_function,
                                      write_flush_cb: duk_debug_write_flush_function,
                                      request_cb: duk_debug_request_function,
                                      detached_cb: duk_debug_detached_function,
                                      udata: *mut ::std::os::raw::c_void);
    pub fn duk_debugger_detach(ctx: *mut duk_context);
    pub fn duk_debugger_cooperate(ctx: *mut duk_context);
    pub fn duk_debugger_notify(ctx: *mut duk_context, nvalues: duk_idx_t) -> duk_bool_t;
    pub fn duk_debugger_pause(ctx: *mut duk_context);
}
